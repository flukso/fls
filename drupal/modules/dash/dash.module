<?php

/**
 * dash.module : The Flukso dashboard
 * 
 * Copyright (c) 2011 Bart Van Der Meerssche <bart.vandermeerssche@flukso.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

define('DASH_PATH', drupal_get_path('module', 'dash'));
define('DASH_HTML', DASH_PATH . '/tpl/dash.html');

define('FLUKSONIAN', 3);
define('NOT_PRIVATE', 0);

/**
 * hook_menu() callback 
 */
function dash_menu() {
  $items = array();

  $items['dash'] = array(
    'description'       => 'The Flukso dashboard',
    'page callback'     => '_dash_render',
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
  );

  $items['dash/user/autocomplete'] = array(
    'title'             => 'User autocomplete',
    'page callback'     => '_dash_user_autocomplete',
    'access callback'   => 'user_access',
    'access arguments'  => array('access user profiles'),
    'type'              => MENU_CALLBACK,
  );

  $items['dash/subscriptions'] = array(
    'title'             => 'Post subscriptions updates',
    'page callback'     => '_dash_subscriptions',
    'access callback'   => 'user_access',
    'access arguments'  => array('logger'),
    'type'              => MENU_CALLBACK,
  );

  return $items;
} 

function _dash_render() {
  global $user;

  drupal_add_js(DASH_PATH . '/js/underscore-min.js');
  drupal_add_js(DASH_PATH . '/js/backbone-min.js');
  drupal_add_js(DASH_PATH . '/js/backbone-nested-v1.0.3.min.js');
  drupal_add_js(DASH_PATH . '/js/highstock.min.js');
  drupal_add_js(DASH_PATH . '/js/papaparse.min.js');
  drupal_add_js(DASH_PATH . '/js/flukso.js');

  drupal_add_js(
    array(
      'me' => array(
        'uid'    => (int)$user->uid,
        'name'   => $user->name,
        'avatar' => _gravatar_get_account_user_picture($user)
      ),

      'subscriptions' => _dash_subs((int)$user->uid)
    ), 'setting');

  $fd = fopen(DASH_HTML, 'r');
  $body = fread($fd, filesize(DASH_HTML));
  fclose($fd);

  return $body;
}

function _dash_subs($uid) {
  if (!_dash_subs_participate($uid))
    return Array();

  $sql = "SELECT subscriptions FROM {logger_users} WHERE uid = %d";
  $subs_json = db_result(db_query($sql, $uid));

  /* making sure the fluksonian did not set his account to private */
  $result = db_query("
    SELECT u.uid, u.name
    FROM {users} u
    INNER JOIN {logger_users} lu ON u.uid = lu.uid
    WHERE u.uid IN (%s)
    AND lu.private = %d
  ", substr($subs_json, 1, -1), NOT_PRIVATE);

  $subs = array();
  while ($sub = db_fetch_object($result)) {
    $account = user_load($sub->uid);

    $subs[$sub->uid] = array(
      'uid'     => (int)$sub->uid,
      'name'    => $sub->name,
      'avatar'  => _gravatar_get_account_user_picture($account)
    );
  }

  /* subs should be ordered in the same sequence as in the JSON array */
  $subs_php = json_decode($subs_json);
  $subs_sorted = array();

  foreach ($subs_php as $uid) {
    if ($subs[$uid]) {
      $subs_sorted[] = $subs[$uid];
    }
  };

  return $subs_sorted;
}

/**
 * Callback function for the dash/user/autocomplete path
 * 
 * @param $string
 *   user query string
 */
function _dash_user_autocomplete($string = '') {
  global $user;
  $matches = array();

  if (_dash_subs_participate((int)$user->uid) && $string) {
    $result = db_query_range("
      SELECT u.uid, u.name
      FROM {users} u
      INNER JOIN {users_roles} ur ON u.uid = ur.uid
      INNER JOIN {logger_users} lu ON u.uid = lu.uid
      WHERE ur.rid = %d
      AND lu.private = %d
      AND LOWER(u.name) LIKE LOWER('%%%s%%')
      AND NOT u.uid = %d
    ", FLUKSONIAN, NOT_PRIVATE, $string, (int)$user->uid, 0, 5);

    while ($fluksonian = db_fetch_object($result)) {
      $account = user_load($fluksonian->uid);

      $matches[] = array(
        'uid' =>  (int)$fluksonian->uid,
        'name' => $fluksonian->name,
        'avatar' => _gravatar_get_account_user_picture($account)
      );
    }
  }

  /* drupal_json doesn't properly escape url's,
     so use PHP's built-in json_encode instead */
  drupal_set_header('Content-Type: application/json');
  echo json_encode($matches);
}

function _dash_subscriptions() {
  global $user;

  $subs_json = @file_get_contents('php://input');
  $subs_php = json_decode($subs_json);

  $valid = true;

  if (!is_array($subs_php)) {
    $valid = false;
  } else {
    foreach ($subs_php as $uid) {
      if (!is_int($uid) or $uid == (int)$user->uid) $valid = false;
    }
  }

  drupal_set_header('Content-Type: application/json');

  if (_dash_subs_participate((int)$user->uid) && $valid) {
    db_query("
      UPDATE {logger_users}
      SET subscriptions = '%s'
      WHERE uid = %d
    ", $subs_json, $user->uid);

    echo '{synced: true}';
  } else {
    echo '{synced: false}';
  }
}

function _dash_subs_participate($uid) {
  $sql = "SELECT private FROM {logger_users} WHERE uid = %d";
  return (int)db_result(db_query($sql, $uid)) == 0 ? true : false;
}

/**
 * Implementation of hook_form_alter().
 */
function dash_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    $form['#redirect'] = 'dash';
    $form['name']['#size'] = 20;
    $form['pass']['#size'] = 20;
  }
}


